Документация к модулю "Эксперимент"
====================================


Общая информация
-----------------

Модуль проведения эксперимента запускается по адресу ``109.234.34.140`` с порта ``5001`` и принимает запросы около десятка видов (каждый вид соответствует конкретному действию на томографе, например *включение/выключение источника излучения*,  *открытие заслонки*  и т.д.). Все URI по которым  принимаются запросы имеют вид ``http://109.234.34.140:5001/tomograph/<номер томографа>/<часть адреса, соответствующая конкретному действию>``.

Пример (функция, включающая источник излучения первого томографа): ``http://109.234.34.140:5001/tomograph/1/source/power-on``. 

**Пока есть только один томограф и он стоит под номером 1, поэтому ниже везде в URI вместо номера томографа будет стоять 1.** 

Список всех действий написан в разделе  `Действия`_ .

Формат запросов и ответов
--------------------------
Модуль принимает запросы типа **GET** и **POST**. **POST** запросы принимают функции  `Установить новые значения тока и напряжения`_ ,   `Подвинуть объект`_ ,  `Начать эксперимент`_ , при этом в теле запроса должна быть **JSON-строка** (нужный формат описан в разделе самих функций).  **Здесь и далее под словом формат запроса/ответа будет подразумеваться формат не самой JSON-строки, а формат python-словаря, соответсвующего этой строке.**  Ответ на любой запрос имеет формат:
	.. code-block:: python

		{
		    'success': <boolean; True, если всё прошло успешно и False, если нет>,
		    'error': <str; общее название ошибки, если значение 'success' было False; иначе пустая строка>,
		    'exception message': <str; сообщение исключения для более подробного описания проблемы, если 'success' было False. Не всегда что-то написано>
		}
**Единственный случай ответа с другим форматом выдаётся функцией**  `Снять изображение`_ **!**


Действия
-----------

Список всех действий:

* `Включение/выключение`_
	* `Включить источник рентгеновского излучения`_
	* `Выключить источник рентгеновского излучения`_
* `Элементы юстировки`_
	* `Открыть заслонку`_
	* `Закрыть заслонку`_
	* `Установить новые значения тока и напряжения`_
	* `Подвинуть объект`_
	* `Снять изображение`_
* `Эксперимент`_
	* `Начать эксперимент`_
	* `Остановить эксперимент`_


Включение/выключение
~~~~~~~~~~~~~~~~~~~~~~~
	
Включить источник рентгеновского излучения
"""""""""""""""""""""""""""""""""""""""""""""
	**URI:**  ``http://109.234.34.140:5001/tomograph/1/source/power-on``

	**Тип запроса:**  GET

	**Описание:**  Включает источник рентгеновского излучения(кэп)
	

Выключить источник рентгеновского излучения
""""""""""""""""""""""""""""""""""""""""""""""
	**URI:**  ``http://109.234.34.140:5001/tomograph/1/source/power-off``

	**Тип запроса:**  GET

	**Описание:**  Выключает источник рентгеновского излучения




Элементы юстировки
~~~~~~~~~~~~~~~~~~~~~~
	
Открыть заслонку
""""""""""""""""""""""""""""""""""""""""""""
	**URI:**  ``http://109.234.34.140:5001/tomograph/1/shutter/open/<int, время в секундах t>``

	**Тип запроса:**  GET

	**Описание:**  Открывает заслонку на **t** секунд, кроме случая **t** равное 0, тогда заслонка будет стоять открытой, пока её явно не закроют функцией  `Закрыть заслонку`_.



Закрыть заслонку
""""""""""""""""""""""""""""""""""""""""""""
	**URI:**  ``http://109.234.34.140:5001/tomograph/1/shutter/close/<int, время в секундах t>``

	**Тип запроса:**  GET

	**Описание:**  Закрывает заслонку на **t** секунд, кроме случая **t** равное 0, тогда заслонка будет стоять закрытой, пока её явно не закроют функцией  `Открыть заслонку`_.


Установить новые значения тока и напряжения
""""""""""""""""""""""""""""""""""""""""""""""
	**URI:**  ``http://109.234.34.140:5001/tomograph/1/source/set-operating-mode``

	**Тип запроса:**  POST

	**Формат запроса:**
		.. code-block:: python

			{
			    'voltage': <float; новое значение напряжения>,
			    'current': <float; новое значение тока>,
			}

	**Описание:**  Устанавливает новые значения тока(в мА) и напряжения (в кВ). **Значения округляются до десятых долей!** Например, если придёт значение 5.778 кВ, то оно округлится до значения 5.8 кВ.

	**Допустимые значения**:  Напряжение - от 2 до 60 кВ, ток - от 2 до 80 мА.


Подвинуть объект
""""""""""""""""""""

	TODO

Снять изображение
"""""""""""""""""""
	**URI:**  ``http://109.234.34.140:5001/tomograph/1/detector/get-frame/<float, экспозиция в миллисекундах t>``

	**Тип запроса:**  GET

	**Описание:**  Снимает изображение с экспозицией в **t** миллисекунд. **Значение  округляется до десятых долей!** Например, если придёт значение 5.778 мс, то оно округлится до значения 5.8 мс.

	**Допустимые значения:**  От 0.1 до 16000 мс.

	**Формат ответа:**
		.. code-block:: python

			{
			    'success': <boolean; True, если всё прошло успешно и False, если нет>,
			    'image': <dict; изображение вместе с метаданными, которые приходят с томографа>
			        {
			            "image_data":
			                {
			                    "image": само изображение
			                    "exposure": время экспозиции
			                    "datetime": дата и время получения изображения в формате dd.mm.yyyy hh:mm:ss
			                    "detector":
			                        {
				                        "model": модель детектора
			                        }
			                }
			            "object":
			                {
			                    "angle position": угол поворота объекта
			                }
			            "shutter":
			                {
			                    "open": True, если заслонка открыта и False иначе
			                }
			            "X-ray source":
			                {
			                    "voltage": напряжение
			                    "current": ток
			                }
			        }
			}








Эксперимент
~~~~~~~~~~~~~

Начать эксперимент
""""""""""""""""""""""
	**URI:**  ``http://109.234.34.140:5001/tomograph/1/experiment/begin``

	**Тип запроса:**  POST

	**Формат запроса:**  Зависит от типа эксперимента (простой или продвинутый). В поле  ``'experiment parameters'``  должно быть подполе  ``'advanced'`` , которое определяет "продвинутость" эксперимента. Если оно  ``False`` ( `Простой эксперимент`_), то формат должен иметь вид: 
		.. code-block:: python

			{
			    'experiment id': <str; идентфикатор эксперимента, пример: '553e898c6c8dc562738e925a'>,
			    'for storage':
			        {
			            'нужно': 'дописать',
			        },
			    'experiment parameters':
			        {
			            'advanced': <boolean; "продвинутость" эксперимента, В ДАННОМ СЛУЧАЕ False>,
			            'DARK':
			                {
			                    'count': <int; кол-во DARK изображений>,
			                    'exposure': <float; экспозиция, с которой снимаются DARK изображения>,
			                },
			            'EMPTY':
			                {
			                    'count': <int; кол-во EMPTY изображений>,
			                    'exposure': <float; экспозиция, с которой снимаются EMPTY изображения>,
			                },
			            'DATA':
			                {
			                    'step count':  <int; кол-во "положений", при одном "положении" изображения снимаются при конкретном положении движка>,
			                    'exposure':  <float; экспозиция, с которой снимаются DATA изображения>,
			                    'angle step': <float; "угловой шаг", угловое расстояние между двумя "положениями">,
			                    'count per step': <int; кол-во DATA изображений, при одном "положении">
			                }
			        },
			}
	если  ``'advanced'``  стоит  ``True`` ( `Продвинутый эксперимент`_), то ожидается такой формат:
		.. code-block:: python

			{
			    'experiment id': <str; идентфикатор эксперимента, пример: '553e898c6c8dc562738e925a'>,
			    'for storage':
			        {
			            'нужно': 'дописать',
			        },
			    'experiment parameters':
			        {
			            'advanced': <boolean; "продвинутость" эксперимента, В ДАННОМ СЛУЧАЕ True>,
			            'instruction': <list; список комманд, для последовательного исполнения на томографе>
			                [
			                    {'type': 'open shutter', 'args': 0},
			                    {'type': 'get frame', 'args': 3.5},
			                    {'type': 'go to position', 'args': [0, 0, -1.495]},
			                    {'type': 'close shutter', 'args': 0},
			                    {'type': 'reset current position', 'args': None},
			                ]
			        },
			}

	**Описание:**  Запускает эксперимент с заданными параметрами, предварительно проверив правильность формата запроса и готовность хранилища. Положительный ответ возвращается после того как  **экперимент начался, а не завершился!**  В течение эксперимента модуль отправляет запросы и хранилищу и web-странице юстировки, запросы содержат изображения или сообщения о завершении эксперимента (не всегда успешного). Смысл входных данных и более подробное описание протекания эксперимента написано в разделе  `Как протекает эксперимент`_.


Остановить эксперимент
"""""""""""""""""""""""""
	**URI:**  ``http://109.234.34.140:5001/tomograph/1/experiment/stop``

	**Тип запроса:**  GET

	**Описание:**  Останавливает текущий эксперимент



Как протекает эксперимент
-------------------------------

Общие вещи
~~~~~~~~~~~
	Про запуск экспримента написано в разделе  `Начать эксперимент`_.

	В общих словах эксперимент проходит примерно так - открылась/закрылась заслонка, как то подвинулся движок, сняли изображение, отправили его хранилищу и web-странице юстировки - и так много раз. При этом к каждому изображению прикрепляется  *идентификатор эксперимента*  - потом в хранилище по этому идентификатору все изображения эксперимента будут собираться в одну папку.

	Как видно в разделе  `Начать эксперимент`_, в входном запросе для запуска эксперимента должны быть поля  ``'experiment id'`` , ``'for storage'``  и  ``'experiment parameters'`` . Что они значат?

	* **'experiment id' (str)**           - идентификатор эксперимента, который прикрепляют к изображениям при отправке.
	* **'for storage' (dict)**            - часть информации, которая отправляется хранилищу, чтобы предупредить его о начале эксперимента(теги эксперимента и всё такое).
	* **'experiment parameters' (dict)**  - параметры эксперимента, "инструкция", по которой будет проводиться эксперимент. В этой части должно быть поле  ``'advanced'``  - *boolean* , определяющий тип эксперимента (простой или продвинутый). Остальные поля уже зависят от "продвинутости" эксперимента и описываются в разделах ниже.


Простой эксперимент
~~~~~~~~~~~~~~~~~~~~~~

	Чтобы понять о чём здесь идёт речь, следует почитать раздел выше  `Общие вещи`_.

	Если в поле  ``'experiment parameters'``  подполе  ``'advanced'``  равен  *False* , то кроме этого подполя должны быть подполя   ``'DARK' (dict)`` ,  ``'EMPTY' (dict)``  и  ``'DATA' (dict)`` (всё это видно в разделе  `Начать эксперимент`_ под словом "Формат запроса"). Что значат эти слова?

	В простом эксперименте все изображения делятся на три типа -  *DARK*,  *EMPTY*  и  *DATA*.  *DARK*  - это изображения получаемые при закрытой заслонке,  *EMPTY*  - при открытой заслонке, но отсутствии объекта,  *DARK*  - самые важные изображения - при открытой заслонке и присутствии объекта. В подполях  ``'DARK'``  и  ``'EMPTY'``  есть поля  ``'count' (int)``  и  ``'exposure' (float)``  - соответственно  *сколько*  раз нужно снять изображение и с какой  *экспозицией* (в миллисекундах).

	В подполе  ``'DATA'``  должны быть поля  ``'step count' (int)`` ,  ``'exposure' (float)`` ,  ``'angle step' (float)`` ,  ``'count per step' (int)`` , здесь всё немного сложнее. Мы хотим получить изображения (проекции) объекта со всех сторон, поэтому во время этой части эксперимента объект снимается под одним углом  ``'count per step'``  *раз* , затем объект поворачивают вокруг своей оси на  ``'angle step'``  *градусов*  и снова снимают  ``'count per step'``  *раз*, потом снова поворачивают на тот же угол и снова снимают столько же раз и так далее.  Всё это повторяется  ``'step count'``   *раз* , т.е.  ``'step count'`` - это  *количество*  различных углов, под которыми снимают объект. При этом все изображения получаются с  *экспозицией*  в  ``'exposure'``  мс.

	Осталось написать  **допустимые значения параметров**. Поля  ``'count'`` ,  ``'step count'`` ,  ``'count per step'``  должны быть  **не меньше 0**  (сверху ограничений нет),  ``'exposure'``  должно быть  **от 0.1 до 16000 (включительно)** ,  ``'angle step'``  - может принимать  **любое**  значение.

	 **Все значения имеющие тип float округляются до десятых долей!**  Например, если в  ``'angle step'``  придёт значение 5.778 гр., то оно округлится до значения 5.8 гр.


 
Продвинутый эксперимент
~~~~~~~~~~~~~~~~~~~~~~~~~~

	Пока не написано:)

